diff -Nru llvm-toolchain-19-19.1.6/debian/changelog llvm-toolchain-19-19.1.6/debian/changelog
--- llvm-toolchain-19-19.1.6/debian/changelog	2024-12-18 17:01:43.000000000 +0800
+++ llvm-toolchain-19-19.1.6/debian/changelog	2025-01-06 06:23:37.000000000 +0800
@@ -1,3 +1,9 @@
+llvm-toolchain-19 (1:19.1.6-1revyos1) unstable; urgency=medium
+
+  * Apply revyos patchset
+
+ -- Han Gao <rabenda.cn@gmail.com>  Mon, 06 Jan 2025 06:23:37 +0800
+
 llvm-toolchain-19 (1:19.1.6-1) unstable; urgency=medium
 
   [ Sylvestre Ledru ]
diff -Nru llvm-toolchain-19-19.1.6/debian/patches/series llvm-toolchain-19-19.1.6/debian/patches/series
--- llvm-toolchain-19-19.1.6/debian/patches/series	2024-12-18 17:01:10.000000000 +0800
+++ llvm-toolchain-19-19.1.6/debian/patches/series	2025-01-06 06:23:04.000000000 +0800
@@ -140,3 +140,8 @@
 ubuntu-plucky.patch
 bolt-disable-proc-check.diff
 python3.13-quote.diff
+
+# revyos patchset
+xuantie/0001-Not-for-upstream-RISCV-use-fence-rw-rw-insteadof-fen.patch
+#xuantie/0002-RISC-V-THead-Fix-36990897.patch
+#xuantie/0003-Not-for-upstream-Riscv-THead-Use-xthead-extension.patch
diff -Nru llvm-toolchain-19-19.1.6/debian/patches/xuantie/0001-Not-for-upstream-RISCV-use-fence-rw-rw-insteadof-fen.patch llvm-toolchain-19-19.1.6/debian/patches/xuantie/0001-Not-for-upstream-RISCV-use-fence-rw-rw-insteadof-fen.patch
--- llvm-toolchain-19-19.1.6/debian/patches/xuantie/0001-Not-for-upstream-RISCV-use-fence-rw-rw-insteadof-fen.patch	1970-01-01 08:00:00.000000000 +0800
+++ llvm-toolchain-19-19.1.6/debian/patches/xuantie/0001-Not-for-upstream-RISCV-use-fence-rw-rw-insteadof-fen.patch	2024-12-13 23:24:54.000000000 +0800
@@ -0,0 +1,135 @@
+From fe4446511671a4fc020b277cd88737f1416d1486 Mon Sep 17 00:00:00 2001
+From: Han Gao <gaohan@iscas.ac.cn>
+Date: Mon, 18 Sep 2023 00:19:52 +0800
+Subject: [PATCH 1/3] [Not-for-upstream] [RISCV] use fence rw, rw insteadof
+ fence.tso
+
+Signed-off-by: Han Gao <gaohan@iscas.ac.cn>
+---
+ llvm/lib/Target/RISCV/GISel/RISCVInstructionSelector.cpp | 5 +----
+ llvm/lib/Target/RISCV/RISCVInstrInfo.td                  | 9 ++-------
+ llvm/test/CodeGen/RISCV/atomic-fence.ll                  | 2 +-
+ llvm/test/MC/RISCV/Ztso.s                                | 4 ++--
+ llvm/test/MC/RISCV/rv32e-valid.s                         | 2 --
+ llvm/test/MC/RISCV/rv32i-invalid.s                       | 3 ---
+ llvm/test/MC/RISCV/rv32i-valid.s                         | 3 ---
+ 7 files changed, 6 insertions(+), 22 deletions(-)
+
+diff --git a/llvm/lib/Target/RISCV/GISel/RISCVInstructionSelector.cpp b/llvm/lib/Target/RISCV/GISel/RISCVInstructionSelector.cpp
+index fdb1ebace001..395948a289c3 100644
+--- a/llvm/lib/Target/RISCV/GISel/RISCVInstructionSelector.cpp
++++ b/llvm/lib/Target/RISCV/GISel/RISCVInstructionSelector.cpp
+@@ -1304,10 +1304,6 @@ void RISCVInstructionSelector::emitFence(AtomicOrdering FenceOrdering,
+   switch (FenceOrdering) {
+   default:
+     llvm_unreachable("Unexpected ordering");
+-  case AtomicOrdering::AcquireRelease:
+-    // fence acq_rel -> fence.tso
+-    MIB.buildInstr(RISCV::FENCE_TSO, {}, {});
+-    return;
+   case AtomicOrdering::Acquire:
+     // fence acquire -> fence r, rw
+     Pred = RISCVFenceField::R;
+@@ -1318,6 +1314,7 @@ void RISCVInstructionSelector::emitFence(AtomicOrdering FenceOrdering,
+     Pred = RISCVFenceField::R | RISCVFenceField::W;
+     Succ = RISCVFenceField::W;
+     break;
++  case AtomicOrdering::AcquireRelease:
+   case AtomicOrdering::SequentiallyConsistent:
+     // fence seq_cst -> fence rw, rw
+     Pred = RISCVFenceField::R | RISCVFenceField::W;
+diff --git a/llvm/lib/Target/RISCV/RISCVInstrInfo.td b/llvm/lib/Target/RISCV/RISCVInstrInfo.td
+index 04054d2c3fee..61cadfad1abb 100644
+--- a/llvm/lib/Target/RISCV/RISCVInstrInfo.td
++++ b/llvm/lib/Target/RISCV/RISCVInstrInfo.td
+@@ -700,12 +700,6 @@ def FENCE : RVInstI<0b000, OPC_MISC_MEM, (outs),
+   let imm12 = {0b0000,pred,succ};
+ }
+ 
+-def FENCE_TSO : RVInstI<0b000, OPC_MISC_MEM, (outs), (ins), "fence.tso", "">, Sched<[]> {
+-  let rs1 = 0;
+-  let rd = 0;
+-  let imm12 = {0b1000,0b0011,0b0011};
+-}
+-
+ def FENCE_I : RVInstI<0b001, OPC_MISC_MEM, (outs), (ins), "fence.i", "">, Sched<[]> {
+   let rs1 = 0;
+   let rd = 0;
+@@ -1727,7 +1721,8 @@ def : Pat<(atomic_fence (XLenVT 4), (timm)), (FENCE 0b10, 0b11)>;
+ // fence release -> fence rw, w
+ def : Pat<(atomic_fence (XLenVT 5), (timm)), (FENCE 0b11, 0b1)>;
+ // fence acq_rel -> fence.tso
+-def : Pat<(atomic_fence (XLenVT 6), (timm)), (FENCE_TSO)>;
++// Force fence acq_rel -> fence.tso -> fence rw, rw
++def : Pat<(atomic_fence (XLenVT 6), (timm)), (FENCE 0b11, 0b11)>;
+ // fence seq_cst -> fence rw, rw
+ def : Pat<(atomic_fence (XLenVT 7), (timm)), (FENCE 0b11, 0b11)>;
+ 
+diff --git a/llvm/test/CodeGen/RISCV/atomic-fence.ll b/llvm/test/CodeGen/RISCV/atomic-fence.ll
+index 7103345ce7bc..3b3111d16810 100644
+--- a/llvm/test/CodeGen/RISCV/atomic-fence.ll
++++ b/llvm/test/CodeGen/RISCV/atomic-fence.ll
+@@ -43,7 +43,7 @@ define void @fence_release() nounwind {
+ define void @fence_acq_rel() nounwind {
+ ; WMO-LABEL: fence_acq_rel:
+ ; WMO:       # %bb.0:
+-; WMO-NEXT:    fence.tso
++; WMO-NEXT:    fence rw, rw
+ ; WMO-NEXT:    ret
+ ;
+ ; TSO-LABEL: fence_acq_rel:
+diff --git a/llvm/test/MC/RISCV/Ztso.s b/llvm/test/MC/RISCV/Ztso.s
+index 06b1030fca7e..23d2ab8e42e6 100644
+--- a/llvm/test/MC/RISCV/Ztso.s
++++ b/llvm/test/MC/RISCV/Ztso.s
+@@ -9,7 +9,7 @@
+ 
+ # CHECK: fence iorw, iorw
+ fence iorw, iorw
+-# CHECK: fence.tso
+-fence.tso
++# CHECK: fence rw, rw
++fence rw, rw
+ # CHECK: fence.i
+ fence.i
+diff --git a/llvm/test/MC/RISCV/rv32e-valid.s b/llvm/test/MC/RISCV/rv32e-valid.s
+index ccb47f1557c6..a32d72682b74 100644
+--- a/llvm/test/MC/RISCV/rv32e-valid.s
++++ b/llvm/test/MC/RISCV/rv32e-valid.s
+@@ -98,8 +98,6 @@ and a0, s1, a3
+ 
+ # CHECK-ASM-AND-OBJ: fence iorw, iorw
+ fence iorw, iorw
+-# CHECK-ASM-AND-OBJ: fence.tso
+-fence.tso
+ # CHECK-ASM-AND-OBJ: fence.i
+ fence.i
+ 
+diff --git a/llvm/test/MC/RISCV/rv32i-invalid.s b/llvm/test/MC/RISCV/rv32i-invalid.s
+index 80a59df94e36..de9e1cca418a 100644
+--- a/llvm/test/MC/RISCV/rv32i-invalid.s
++++ b/llvm/test/MC/RISCV/rv32i-invalid.s
+@@ -186,6 +186,3 @@ pause # CHECK: :[[@LINE]]:1: error: instruction requires the following: 'Zihintp
+ 
+ # Using floating point registers when integer registers are expected
+ addi a2, ft0, 24 # CHECK: :[[@LINE]]:10: error: invalid operand for instruction
+-
+-# fence.tso accepts no operands
+-fence.tso rw, rw # CHECK: :[[@LINE]]:11: error: invalid operand for instruction
+diff --git a/llvm/test/MC/RISCV/rv32i-valid.s b/llvm/test/MC/RISCV/rv32i-valid.s
+index f03c2e1c23cf..df775f2badcb 100644
+--- a/llvm/test/MC/RISCV/rv32i-valid.s
++++ b/llvm/test/MC/RISCV/rv32i-valid.s
+@@ -326,9 +326,6 @@ fence r,w
+ # CHECK-ASM-AND-OBJ: fence w, ir
+ # CHECK-ASM: encoding: [0x0f,0x00,0xa0,0x01]
+ fence w,ir
+-# CHECK-ASM-AND-OBJ: fence.tso
+-# CHECK-ASM: encoding: [0x0f,0x00,0x30,0x83]
+-fence.tso
+ 
+ # CHECK-ASM-AND-OBJ: fence.i
+ # CHECK-ASM: encoding: [0x0f,0x10,0x00,0x00]
+-- 
+2.40.1
+
diff -Nru llvm-toolchain-19-19.1.6/debian/patches/xuantie/0002-RISC-V-THead-Fix-36990897.patch llvm-toolchain-19-19.1.6/debian/patches/xuantie/0002-RISC-V-THead-Fix-36990897.patch
--- llvm-toolchain-19-19.1.6/debian/patches/xuantie/0002-RISC-V-THead-Fix-36990897.patch	1970-01-01 08:00:00.000000000 +0800
+++ llvm-toolchain-19-19.1.6/debian/patches/xuantie/0002-RISC-V-THead-Fix-36990897.patch	2024-12-13 23:24:54.000000000 +0800
@@ -0,0 +1,366 @@
+From acfa464b9bcdd02f9852a6d92c201a095f909254 Mon Sep 17 00:00:00 2001
+From: Han Gao <rabenda.cn@gmail.com>
+Date: Fri, 13 Dec 2024 15:21:59 +0000
+Subject: [PATCH 2/3] RISC-V: THead Fix 36990897 This patch fixes the hardware
+ problems of TH-1520 by inserting instructions.
+
+The solutions for fixing the issue are as follows:
+1. Set all Load-Reserved instructions' ordering to aqrl
+2. Insert instructions around all Load-Reserved instructions,
+the sequence is as follows
+    th.sync.i
+    j .Llr_aqrl
+    .align 7
+    .Llr_aqrl:
+    th.dcache.cval1 xy
+    lr.*.aqrl (xy)
+    th.sync
+    .aligin 7
+    next insn
+
+Signed-off-by: Lifang Xia <lifang_xia@linux.alibaba.com>
+Signed-off-by: Liao Chunyu <chunyu@iscas.ac.cn>
+Signed-off-by: Han Gao <rabenda.cn@gmail.com>
+---
+ .../RISCV/MCTargetDesc/RISCVAsmBackend.cpp    | 92 +++++++++++++++++++
+ .../RISCV/MCTargetDesc/RISCVAsmBackend.h      |  5 +
+ .../RISCV/MCTargetDesc/RISCVBaseInfo.cpp      | 23 +++++
+ .../Target/RISCV/MCTargetDesc/RISCVBaseInfo.h |  6 ++
+ .../RISCV/MCTargetDesc/RISCVELFStreamer.cpp   | 15 ++-
+ .../RISCV/MCTargetDesc/RISCVELFStreamer.h     |  3 +-
+ .../RISCV/MCTargetDesc/RISCVMCCodeEmitter.cpp | 28 ++++++
+ llvm/lib/Target/RISCV/RISCVInstrInfo.cpp      | 18 ++++
+ 8 files changed, 187 insertions(+), 3 deletions(-)
+
+diff --git a/llvm/lib/Target/RISCV/MCTargetDesc/RISCVAsmBackend.cpp b/llvm/lib/Target/RISCV/MCTargetDesc/RISCVAsmBackend.cpp
+index 237a8eaca05a..c8fdd64dd03f 100644
+--- a/llvm/lib/Target/RISCV/MCTargetDesc/RISCVAsmBackend.cpp
++++ b/llvm/lib/Target/RISCV/MCTargetDesc/RISCVAsmBackend.cpp
+@@ -15,6 +15,8 @@
+ #include "llvm/MC/MCDirectives.h"
+ #include "llvm/MC/MCELFObjectWriter.h"
+ #include "llvm/MC/MCExpr.h"
++#include "llvm/MC/MCInstBuilder.h"
++#include "llvm/MC/MCObjectStreamer.h"
+ #include "llvm/MC/MCObjectWriter.h"
+ #include "llvm/MC/MCSymbol.h"
+ #include "llvm/MC/MCValue.h"
+@@ -707,6 +709,62 @@ bool RISCVAsmBackend::shouldInsertFixupForCodeAlign(MCAssembler &Asm,
+   return true;
+ }
+ 
++void RISCVAsmBackend::emitInstructionBegin(MCObjectStreamer &OS,
++                                           const MCInst &Inst,
++                                           const MCSubtargetInfo &STI) {
++  if (RISCVVendorXTHead::shouldFixWithId(STI, "36990897")) {
++    // Work arround for th1520, aone 36990897
++    switch (Inst.getOpcode()) {
++    case RISCV::MRET:
++    case RISCV::SRET:
++      OS.emitInstruction(MCInstBuilder(RISCV::TH_SYNC_I), STI);
++      break;
++    case RISCV::LR_W:
++    case RISCV::LR_W_AQ:
++    case RISCV::LR_W_RL:
++    case RISCV::LR_W_AQ_RL:
++    case RISCV::LR_D:
++    case RISCV::LR_D_AQ:
++    case RISCV::LR_D_RL:
++    case RISCV::LR_D_AQ_RL:
++      MCContext &Ctx = OS.getContext();
++      MCSymbol *TmpLabel = Ctx.createNamedTempSymbol("LR");
++      const MCExpr *RefToLinkTmpLabel = MCSymbolRefExpr::create(TmpLabel, Ctx);
++      MCOperand DestReg = Inst.getOperand(1);
++      OS.emitInstruction(MCInstBuilder(RISCV::TH_SYNC_I), STI);
++      OS.emitInstruction(
++          MCInstBuilder(RISCV::JAL).addReg(0).addExpr(RefToLinkTmpLabel), STI);
++      OS.emitCodeAlignment(Align(128), &STI);
++      OS.emitLabel(TmpLabel);
++      OS.emitInstruction(
++          MCInstBuilder(RISCV::TH_DCACHE_CVAL1).addOperand(DestReg), STI);
++      break;
++    }
++  }
++}
++
++void RISCVAsmBackend::emitInstructionEnd(MCObjectStreamer &OS,
++                                         const MCInst &Inst) {
++  if (RISCVVendorXTHead::shouldFixWithId(STI, "36990897")) {
++    // Work arround for th1520, aone 36990897
++    switch (Inst.getOpcode()) {
++    default:
++      break;
++    case RISCV::LR_W:
++    case RISCV::LR_W_AQ:
++    case RISCV::LR_W_RL:
++    case RISCV::LR_W_AQ_RL:
++    case RISCV::LR_D:
++    case RISCV::LR_D_AQ:
++    case RISCV::LR_D_RL:
++    case RISCV::LR_D_AQ_RL:
++      OS.emitInstruction(MCInstBuilder(RISCV::TH_SYNC), STI);
++      OS.emitCodeAlignment(Align(128), &STI);
++      break;
++    }
++  }
++}
++
+ std::unique_ptr<MCObjectTargetWriter>
+ RISCVAsmBackend::createObjectTargetWriter() const {
+   return createRISCVELFObjectWriter(OSABI, Is64Bit);
+@@ -720,3 +778,37 @@ MCAsmBackend *llvm::createRISCVAsmBackend(const Target &T,
+   uint8_t OSABI = MCELFObjectTargetWriter::getOSABI(TT.getOS());
+   return new RISCVAsmBackend(STI, OSABI, TT.isArch64Bit(), Options);
+ }
++
++//namespace {
++//class RISCVELFStreamer : public MCELFStreamer {
++//public:
++//  RISCVELFStreamer(MCContext &Context, std::unique_ptr<MCAsmBackend> TAB,
++//                 std::unique_ptr<MCObjectWriter> OW,
++//                 std::unique_ptr<MCCodeEmitter> Emitter)
++//      : MCELFStreamer(Context, std::move(TAB), std::move(OW),
++//                      std::move(Emitter)) {}
++    
++//  void emitInstruction(const MCInst &Inst, const MCSubtargetInfo &STI) override;
++//};
++//} // end anonymous namespace
++    
++//void RISCVTargetStreamer::emitInstruction(MCObjectStreamer &S, const MCInst &Inst,
++//                             const MCSubtargetInfo &STI) {
++// auto &Backend = static_cast<RISCVAsmBackend &>(S.getAssembler().getBackend());
++//  Backend.emitInstructionBegin(S, Inst, STI);
++//  S.MCObjectStreamer::emitInstruction(Inst, STI);
++//  Backend.emitInstructionEnd(S, Inst);
++//}
++  
++//void RISCVELFStreamer::emitInstruction(const MCInst &Inst,
++//                                     const MCSubtargetInfo &STI) {
++//  RISCVTargetStreamer::emitInstruction(*this, Inst, STI);
++//} 
++  
++//MCStreamer *llvm::createRISCVELFStreamer(const Triple &T, MCContext &Context,
++//                                       std::unique_ptr<MCAsmBackend> &&MAB,
++//                                       std::unique_ptr<MCObjectWriter> &&MOW,
++//                                       std::unique_ptr<MCCodeEmitter> &&MCE) {
++//  return new RISCVELFStreamer(Context, std::move(MAB), std::move(MOW),
++//                            std::move(MCE));
++//}
+diff --git a/llvm/lib/Target/RISCV/MCTargetDesc/RISCVAsmBackend.h b/llvm/lib/Target/RISCV/MCTargetDesc/RISCVAsmBackend.h
+index 886e7efe76bc..cdb4778a3f0f 100644
+--- a/llvm/lib/Target/RISCV/MCTargetDesc/RISCVAsmBackend.h
++++ b/llvm/lib/Target/RISCV/MCTargetDesc/RISCVAsmBackend.h
+@@ -15,6 +15,7 @@
+ #include "llvm/MC/MCAsmBackend.h"
+ #include "llvm/MC/MCFixupKindInfo.h"
+ #include "llvm/MC/MCSubtargetInfo.h"
++#include "llvm/MC/MCELFStreamer.h"
+ 
+ namespace llvm {
+ class MCAssembler;
+@@ -100,6 +101,10 @@ public:
+                     const MCSubtargetInfo *STI) const override;
+ 
+   const MCTargetOptions &getTargetOptions() const { return TargetOptions; }
++
++  void emitInstructionBegin(MCObjectStreamer &OS, const MCInst &Inst,
++                            const MCSubtargetInfo &STI);
++  void emitInstructionEnd(MCObjectStreamer &OS, const MCInst &Inst);
+ };
+ }
+ 
+diff --git a/llvm/lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.cpp b/llvm/lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.cpp
+index 4c59474df883..a05fb982f847 100644
+--- a/llvm/lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.cpp
++++ b/llvm/lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.cpp
+@@ -19,6 +19,7 @@
+ #include "llvm/Support/raw_ostream.h"
+ #include "llvm/TargetParser/TargetParser.h"
+ #include "llvm/TargetParser/Triple.h"
++#include "llvm/Support/CommandLine.h"
+ 
+ namespace llvm {
+ 
+@@ -235,4 +236,26 @@ void RISCVZC::printRlist(unsigned SlistEncode, raw_ostream &OS) {
+   OS << "}";
+ }
+ 
++namespace RISCVVendorXTHead {
++
++static cl::opt<std::string> RISCVXTheadId("riscv-xthead-id",
++                                          cl::desc("The ID of THead."),
++                                          cl::init("36990897"), cl::Hidden);
++
++bool shouldFixWithId(const MCSubtargetInfo &STI, std::string id) {
++  if (RISCVXTheadId.find(id) == std::string::npos)
++    return false;
++
++  // should fix 36990897 or not. it depends on xtheadcmo and xtheadsync
++  if (id.find("36990897") != std::string::npos) {
++    if (STI.hasFeature(RISCV::FeatureVendorXTHeadCmo) &&
++        STI.hasFeature(RISCV::FeatureVendorXTHeadSync))
++      // Enabled fixing 36990897
++      return true;
++  }
++
++  return false;
++}
++
++} // namespace RISCVVendorXTHead
+ } // namespace llvm
+diff --git a/llvm/lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.h b/llvm/lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.h
+index 626206962e75..4a81bcf43be0 100644
+--- a/llvm/lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.h
++++ b/llvm/lib/Target/RISCV/MCTargetDesc/RISCVBaseInfo.h
+@@ -604,6 +604,12 @@ inline static bool getSpimm(unsigned RlistVal, unsigned &SpimmVal,
+ void printRlist(unsigned SlistEncode, raw_ostream &OS);
+ } // namespace RISCVZC
+ 
++namespace RISCVVendorXTHead {
++
++bool shouldFixWithId(const MCSubtargetInfo &STI, std::string id);
++
++} // namespace RISCVVendorXTHead
++
+ } // namespace llvm
+ 
+ #endif
+diff --git a/llvm/lib/Target/RISCV/MCTargetDesc/RISCVELFStreamer.cpp b/llvm/lib/Target/RISCV/MCTargetDesc/RISCVELFStreamer.cpp
+index 2c2aa8af8955..8e265981dd35 100644
+--- a/llvm/lib/Target/RISCV/MCTargetDesc/RISCVELFStreamer.cpp
++++ b/llvm/lib/Target/RISCV/MCTargetDesc/RISCVELFStreamer.cpp
+@@ -59,6 +59,10 @@ void RISCVTargetELFStreamer::emitDirectiveOptionRVC() {}
+ void RISCVTargetELFStreamer::emitDirectiveOptionNoRVC() {}
+ void RISCVTargetELFStreamer::emitDirectiveOptionRelax() {}
+ void RISCVTargetELFStreamer::emitDirectiveOptionNoRelax() {}
++//void RISCVTargetELFStreamer::emitInstruction(const MCInst &Inst,
++//                                         const MCSubtargetInfo &STI) {
++//  RISCV::emitInstruction(*this, Inst, STI);
++//}
+ 
+ void RISCVTargetELFStreamer::emitAttribute(unsigned Attribute, unsigned Value) {
+   getStreamer().setAttributeItem(Attribute, Value, /*OverwriteExisting=*/true);
+@@ -169,8 +173,15 @@ void RISCVELFStreamer::changeSection(MCSection *Section, uint32_t Subsection) {
+ 
+ void RISCVELFStreamer::emitInstruction(const MCInst &Inst,
+                                        const MCSubtargetInfo &STI) {
+-  emitInstructionsMappingSymbol();
+-  MCELFStreamer::emitInstruction(Inst, STI);
++  if (RISCVVendorXTHead::shouldFixWithId(STI, "36990897")) {
++    auto &Backend = static_cast<RISCVAsmBackend &>(getAssembler().getBackend());
++    Backend.emitInstructionBegin(*this, Inst, STI);
++    MCELFStreamer::emitInstruction(Inst, STI);
++    Backend.emitInstructionEnd(*this, Inst);
++  } else {
++    emitInstructionsMappingSymbol();
++    MCELFStreamer::emitInstruction(Inst, STI);
++  }
+ }
+ 
+ void RISCVELFStreamer::emitBytes(StringRef Data) {
+diff --git a/llvm/lib/Target/RISCV/MCTargetDesc/RISCVELFStreamer.h b/llvm/lib/Target/RISCV/MCTargetDesc/RISCVELFStreamer.h
+index b06760859483..24da9bbf1224 100644
+--- a/llvm/lib/Target/RISCV/MCTargetDesc/RISCVELFStreamer.h
++++ b/llvm/lib/Target/RISCV/MCTargetDesc/RISCVELFStreamer.h
+@@ -67,7 +67,8 @@ public:
+   void emitDirectiveOptionRelax() override;
+   void emitDirectiveOptionNoRelax() override;
+   void emitDirectiveVariantCC(MCSymbol &Symbol) override;
+-
++  
++  //void emitInstruction(const MCInst &Inst, const MCSubtargetInfo &STI) override;
+   void finish() override;
+ };
+ 
+diff --git a/llvm/lib/Target/RISCV/MCTargetDesc/RISCVMCCodeEmitter.cpp b/llvm/lib/Target/RISCV/MCTargetDesc/RISCVMCCodeEmitter.cpp
+index c9636b2c7025..b7293cc7db22 100644
+--- a/llvm/lib/Target/RISCV/MCTargetDesc/RISCVMCCodeEmitter.cpp
++++ b/llvm/lib/Target/RISCV/MCTargetDesc/RISCVMCCodeEmitter.cpp
+@@ -69,6 +69,10 @@ public:
+                         SmallVectorImpl<MCFixup> &Fixups,
+                         const MCSubtargetInfo &STI) const;
+ 
++  void fixTHEAD36990897(const MCInst &MI, SmallVectorImpl<char> &CB,
++                        SmallVectorImpl<MCFixup> &Fixups,
++                        const MCSubtargetInfo &STI) const;
++
+   /// TableGen'erated function for getting the binary encoding for an
+   /// instruction.
+   uint64_t getBinaryCodeForInstr(const MCInst &MI,
+@@ -302,6 +306,20 @@ void RISCVMCCodeEmitter::expandLongCondBr(const MCInst &MI,
+   }
+ }
+ 
++void RISCVMCCodeEmitter::fixTHEAD36990897(
++    const MCInst &MI, SmallVectorImpl<char> &CB,
++    SmallVectorImpl<MCFixup> &Fixups, const MCSubtargetInfo &STI) const {
++  MCInst Inst = MI;
++  uint32_t Binary;
++
++#define MASK_AQ (1 << 26)
++#define MASK_RL (1 << 25)
++  Binary = getBinaryCodeForInstr(Inst, Fixups, STI);
++  // Add AQRL for the lr.w/lr.d
++  Binary = (Binary | MASK_AQ | MASK_RL);
++  support::endian::write(CB, Binary, llvm::endianness::little);
++}
++
+ void RISCVMCCodeEmitter::encodeInstruction(const MCInst &MI,
+                                            SmallVectorImpl<char> &CB,
+                                            SmallVectorImpl<MCFixup> &Fixups,
+@@ -310,6 +328,16 @@ void RISCVMCCodeEmitter::encodeInstruction(const MCInst &MI,
+   // Get byte count of instruction.
+   unsigned Size = Desc.getSize();
+ 
++  // Fix thead 36990897
++  if ((MI.getOpcode() == RISCV::LR_W || MI.getOpcode() == RISCV::LR_W_AQ ||
++       MI.getOpcode() == RISCV::LR_W_RL || MI.getOpcode() == RISCV::LR_D ||
++       MI.getOpcode() == RISCV::LR_D_AQ || MI.getOpcode() == RISCV::LR_D_RL) &&
++      RISCVVendorXTHead::shouldFixWithId(STI, "36990897")) {
++    fixTHEAD36990897(MI, CB, Fixups, STI);
++    MCNumEmitted += 1;
++    return;
++  }
++
+   // RISCVInstrInfo::getInstSizeInBytes expects that the total size of the
+   // expanded instructions for each pseudo is correct in the Size field of the
+   // tablegen definition for the pseudo.
+diff --git a/llvm/lib/Target/RISCV/RISCVInstrInfo.cpp b/llvm/lib/Target/RISCV/RISCVInstrInfo.cpp
+index 6c0cbeadebf4..9e2ac849a611 100644
+--- a/llvm/lib/Target/RISCV/RISCVInstrInfo.cpp
++++ b/llvm/lib/Target/RISCV/RISCVInstrInfo.cpp
+@@ -11,6 +11,7 @@
+ //===----------------------------------------------------------------------===//
+ 
+ #include "RISCVInstrInfo.h"
++#include "MCTargetDesc/RISCVBaseInfo.h"
+ #include "MCTargetDesc/RISCVMatInt.h"
+ #include "RISCV.h"
+ #include "RISCVMachineFunctionInfo.h"
+@@ -1491,6 +1492,23 @@ unsigned RISCVInstrInfo::getInstSizeInBytes(const MachineInstr &MI) const {
+     if (isCompressibleInst(MI, STI))
+       return 2;
+   }
++  
++  if (RISCVVendorXTHead::shouldFixWithId(STI, "36990897") &&
++      (Opcode == RISCV::PseudoMaskedAtomicSwap32 ||
++       Opcode == RISCV::PseudoMaskedAtomicLoadAdd32 ||
++       Opcode == RISCV::PseudoAtomicLoadNand32 ||
++       Opcode == RISCV::PseudoMaskedAtomicLoadSub32 ||
++       Opcode == RISCV::PseudoMaskedAtomicLoadNand32 ||
++       Opcode == RISCV::PseudoMaskedAtomicLoadMax32 ||
++       Opcode == RISCV::PseudoMaskedAtomicLoadMin32 ||
++       Opcode == RISCV::PseudoMaskedAtomicLoadUMax32 ||
++       Opcode == RISCV::PseudoMaskedAtomicLoadUMin32 ||
++       Opcode == RISCV::PseudoCmpXchg32 || Opcode == RISCV::PseudoCmpXchg64 ||
++       Opcode == RISCV::PseudoMaskedCmpXchg32 ||
++       Opcode == RISCV::PseudoAtomicLoadNand64)) {
++    // Update the atomic pesudo instructions size
++    return get(Opcode).getSize() + 260;
++  }
+ 
+   switch (Opcode) {
+   case TargetOpcode::STACKMAP:
+-- 
+2.40.1
+
diff -Nru llvm-toolchain-19-19.1.6/debian/patches/xuantie/0003-Not-for-upstream-Riscv-THead-Use-xthead-extension.patch llvm-toolchain-19-19.1.6/debian/patches/xuantie/0003-Not-for-upstream-Riscv-THead-Use-xthead-extension.patch
--- llvm-toolchain-19-19.1.6/debian/patches/xuantie/0003-Not-for-upstream-Riscv-THead-Use-xthead-extension.patch	1970-01-01 08:00:00.000000000 +0800
+++ llvm-toolchain-19-19.1.6/debian/patches/xuantie/0003-Not-for-upstream-Riscv-THead-Use-xthead-extension.patch	2024-12-13 23:24:54.000000000 +0800
@@ -0,0 +1,37 @@
+From 8e564b7cc54b1f1d37d5f7eff47d96cc48e176df Mon Sep 17 00:00:00 2001
+From: Han Gao <gaohan@iscas.ac.cn>
+Date: Tue, 6 Aug 2024 23:24:30 +0800
+Subject: [PATCH 3/3] [Not-for-upstream] [Riscv] [THead]: Use xthead extension
+
+Signed-off-by: Han Gao <gaohan@iscas.ac.cn>
+---
+ clang/lib/Driver/ToolChains/Arch/RISCV.cpp | 6 ++++--
+ 1 file changed, 4 insertions(+), 2 deletions(-)
+
+diff --git a/clang/lib/Driver/ToolChains/Arch/RISCV.cpp b/clang/lib/Driver/ToolChains/Arch/RISCV.cpp
+index 149a31f58e75..7905f4cacfb5 100644
+--- a/clang/lib/Driver/ToolChains/Arch/RISCV.cpp
++++ b/clang/lib/Driver/ToolChains/Arch/RISCV.cpp
+@@ -353,7 +353,8 @@ std::string riscv::getRISCVArch(const llvm::opt::ArgList &Args,
+       if (Triple.isAndroid())
+         return "rv64imafdcv_zba_zbb_zbs";
+ 
+-      return "rv64imafdc";
++      // return "rv64imafdc";
++      return "rv64gc_zfh_xtheadba_xtheadbb_xtheadbs_xtheadcmo_xtheadcondmov_xtheadfmemidx_xtheadmac_xtheadmemidx_xtheadmempair_xtheadsync";
+     }
+   }
+ 
+@@ -373,7 +374,8 @@ std::string riscv::getRISCVArch(const llvm::opt::ArgList &Args,
+     else if (Triple.isAndroid())
+       return "rv64imafdcv_zba_zbb_zbs";
+     else
+-      return "rv64imafdc";
++//      return "rv64imafdc";
++      return "rv64gc_zfh_xtheadba_xtheadbb_xtheadbs_xtheadcmo_xtheadcondmov_xtheadfmemidx_xtheadmac_xtheadmemidx_xtheadmempair_xtheadsync";
+   }
+ }
+ 
+-- 
+2.40.1
+
