diff -Nru golang-1.23-1.23.6/debian/changelog golang-1.23-1.23.6/debian/changelog
--- golang-1.23-1.23.6/debian/changelog	2025-02-13 17:17:32.000000000 +0800
+++ golang-1.23-1.23.6/debian/changelog	2025-02-19 15:15:09.000000000 +0800
@@ -1,3 +1,9 @@
+golang-1.23 (1.23.6-4revyos1+th1520) unstable; urgency=medium
+
+  * Apply revyos patchset
+
+ -- Han Gao <rabenda.cn@gmail.com>  Wed, 19 Feb 2025 15:15:09 +0800
+
 golang-1.23 (1.23.6-4) unstable; urgency=medium
 
   * Team upload
diff -Nru golang-1.23-1.23.6/debian/patches/0001-release-branch.go1.21-cmd-internal-obj-hack-FENCETSO.patch golang-1.23-1.23.6/debian/patches/0001-release-branch.go1.21-cmd-internal-obj-hack-FENCETSO.patch
--- golang-1.23-1.23.6/debian/patches/0001-release-branch.go1.21-cmd-internal-obj-hack-FENCETSO.patch	1970-01-01 08:00:00.000000000 +0800
+++ golang-1.23-1.23.6/debian/patches/0001-release-branch.go1.21-cmd-internal-obj-hack-FENCETSO.patch	2025-02-19 15:14:28.000000000 +0800
@@ -0,0 +1,41 @@
+From 1775865df36e0a7b2a9b1c92d1784bf3dc2b712c Mon Sep 17 00:00:00 2001
+From: WANG Xuerui <git@xen0n.name>
+Date: Tue, 19 Sep 2023 15:42:23 +0800
+Subject: [PATCH 1/5] [release-branch.go1.21] cmd/internal/obj: hack FENCETSO
+ to make it "fence rw, rw" instead
+
+It is said that T-Head C910/C906 are early designs that don't support
+fence.tso natively, so we would want to avoid emitting it because SBI
+emulation is slow.
+
+This is not currently used at present, but preemptively patch it so we
+won't have to revisit this in the future.
+
+The change is a hack, because the RevyOS Go fork is only intended to be
+used with T-Head systems.
+
+Closes: https://github.com/revyos/revyos/issues/22
+Change-Id: I8107e3bd2d9c208cd0606f09b984ad59eb75010e
+(cherry picked from commit dcbf1726473b1d2ddd95fb3aa0d4b140d5a3383e)
+---
+ src/cmd/internal/obj/riscv/inst.go | 4 +++-
+ 1 file changed, 3 insertions(+), 1 deletion(-)
+
+diff --git a/src/cmd/internal/obj/riscv/inst.go b/src/cmd/internal/obj/riscv/inst.go
+index 223ddd15b2..75484b6cc0 100644
+--- a/src/cmd/internal/obj/riscv/inst.go
++++ b/src/cmd/internal/obj/riscv/inst.go
+@@ -212,7 +212,9 @@ func encode(a obj.As) *inst {
+ 	case AFENCE:
+ 		return &inst{0xf, 0x0, 0x0, 0, 0x0}
+ 	case AFENCETSO:
+-		return &inst{0xf, 0x0, 0x13, -1997, 0x41}
++		// https://github.com/revyos/revyos/issues/22
++		// encode "fence rw, rw" instead
++		return &inst{0xf, 0x0, 0x13, 51, 0x1}
+ 	case AFEQD:
+ 		return &inst{0x53, 0x2, 0x0, -1504, 0x51}
+ 	case AFEQQ:
+-- 
+2.47.1
+
diff -Nru golang-1.23-1.23.6/debian/patches/0002-release-branch.go1.23-src-cmd-internal-obj-riscv-Fix.patch golang-1.23-1.23.6/debian/patches/0002-release-branch.go1.23-src-cmd-internal-obj-riscv-Fix.patch
--- golang-1.23-1.23.6/debian/patches/0002-release-branch.go1.23-src-cmd-internal-obj-riscv-Fix.patch	1970-01-01 08:00:00.000000000 +0800
+++ golang-1.23-1.23.6/debian/patches/0002-release-branch.go1.23-src-cmd-internal-obj-riscv-Fix.patch	2025-02-19 15:14:28.000000000 +0800
@@ -0,0 +1,531 @@
+From 576b9865ba00a40435eed09ba1189de37ff7bd3a Mon Sep 17 00:00:00 2001
+From: Cooper Qu <cooper.qu@linux.alibaba.com>
+Date: Tue, 17 Oct 2023 20:59:23 +0800
+Subject: [PATCH 2/5] [release-branch.go1.23] src/cmd/internal/obj/riscv: Fix
+ occasional execution errors caused by TH-1520 hardware problems.
+
+This patch fixes the hardware problems of TH-1520
+by inserting instructions in the assembler, and
+includes the following dependent functionality additions:
+1. Support XTheadCmo and XTheadSync.
+2. Support pseudo PCALIGN.
+
+The solutions for fixing the issue are as follows:
+1. Set all Load-Reserved instructions' ordering to aqrl
+2. Insert instructions around all Load-Reserved instructions,
+the sequence is as follows
+	sync.i
+	j .Llr_aqrl
+	.align 7
+	.Llr_aqrl:
+	dcache.cval1 xy
+	lr.*.aqrl (xy)
+	sync
+	.aligin 7
+	next insn
+
+(cherry picked from commit e63488185002b1401247585b39360797bff54b47)
+
+Change-Id: I8f05f84d8b1ed603b323c186bc0224b7361d1e07
+---
+ src/cmd/asm/internal/arch/riscv64.go   |  20 +++
+ src/cmd/internal/obj/riscv/anames.go   |  26 ++++
+ src/cmd/internal/obj/riscv/asm_test.go |  28 +++-
+ src/cmd/internal/obj/riscv/cpu.go      |  32 +++++
+ src/cmd/internal/obj/riscv/inst.go     |  65 +++++++++
+ src/cmd/internal/obj/riscv/obj.go      | 178 ++++++++++++++++++++++++-
+ 6 files changed, 345 insertions(+), 4 deletions(-)
+
+diff --git a/src/cmd/asm/internal/arch/riscv64.go b/src/cmd/asm/internal/arch/riscv64.go
+index 27a66c5e63..6adbce4fd3 100644
+--- a/src/cmd/asm/internal/arch/riscv64.go
++++ b/src/cmd/asm/internal/arch/riscv64.go
+@@ -26,3 +26,23 @@ func IsRISCV64AMO(op obj.As) bool {
+ 	}
+ 	return false
+ }
++
++// IsRISCV64XThead reports whether the op (as defined by a riscv.A*
++// constant) is one of the XThead extensions instructions that requires
++// special handling.
++func IsRISCV64XThead(op obj.As) bool {
++	switch op {
++	case
++		// 3. XTheadCmo provides instructions for cache management.
++		riscv.ATHDCACHECALL, riscv.ATHDCACHECIALL, riscv.ATHDCACHEIALL, riscv.ATHDCACHECPA,
++		riscv.ATHDCACHECIPA, riscv.ATHDCACHEIPA, riscv.ATHDCACHECVA, riscv.ATHDCACHECIVA,
++		riscv.ATHDCACHEIVA, riscv.ATHDCACHECSW, riscv.ATHDCACHECISW, riscv.ATHDCACHEISW,
++		riscv.ATHDCACHECPAL1, riscv.ATHDCACHECVAL1, riscv.ATHICACHEIALL, riscv.ATHICACHEIALLS,
++		riscv.ATHICACHEIPA, riscv.ATHICACHEIVA, riscv.ATHL2CACHECALL, riscv.ATHL2CACHECIALL,
++		riscv.ATHL2CACHEIALL, riscv.ATHSFENCEVMAS,
++		// 4. XTheadSync provides instructions for multi-processor synchronization.
++		riscv.ATHSYNC, riscv.ATHSYNCS, riscv.ATHSYNCI, riscv.ATHSYNCIS:
++		return true
++	}
++	return false
++}
+diff --git a/src/cmd/internal/obj/riscv/anames.go b/src/cmd/internal/obj/riscv/anames.go
+index 60c7b48620..233a6df5d5 100644
+--- a/src/cmd/internal/obj/riscv/anames.go
++++ b/src/cmd/internal/obj/riscv/anames.go
+@@ -288,5 +288,31 @@ var Anames = []string{
+ 	"NOT",
+ 	"SEQZ",
+ 	"SNEZ",
++	"THDCACHECALL",
++	"THDCACHECIALL",
++	"THDCACHEIALL",
++	"THDCACHECPA",
++	"THDCACHECIPA",
++	"THDCACHEIPA",
++	"THDCACHECVA",
++	"THDCACHECIVA",
++	"THDCACHEIVA",
++	"THDCACHECSW",
++	"THDCACHECISW",
++	"THDCACHEISW",
++	"THDCACHECPAL1",
++	"THDCACHECVAL1",
++	"THICACHEIALL",
++	"THICACHEIALLS",
++	"THICACHEIPA",
++	"THICACHEIVA",
++	"THL2CACHECALL",
++	"THL2CACHECIALL",
++	"THL2CACHEIALL",
++	"THSFENCEVMAS",
++	"THSYNC",
++	"THSYNCS",
++	"THSYNCI",
++	"THSYNCIS",
+ 	"LAST",
+ }
+diff --git a/src/cmd/internal/obj/riscv/asm_test.go b/src/cmd/internal/obj/riscv/asm_test.go
+index 96ea230841..703047376e 100644
+--- a/src/cmd/internal/obj/riscv/asm_test.go
++++ b/src/cmd/internal/obj/riscv/asm_test.go
+@@ -285,7 +285,7 @@ func TestPCAlign(t *testing.T) {
+ 	tmpfile := filepath.Join(dir, "x.s")
+ 	asm := `
+ TEXT _stub(SB),$0-0
+-	FENCE
++	CNOP
+ 	PCALIGN	$8
+ 	FENCE
+ 	RET
+@@ -300,12 +300,34 @@ TEXT _stub(SB),$0-0
+ 		t.Errorf("Failed to assemble: %v\n%s", err, out)
+ 	}
+ 	// The expected instruction sequence after alignment:
+-	//	FENCE
++	//	CNOP
+ 	//	NOP
++	//	CNOP
+ 	//	FENCE
+ 	//	RET
+-	want := "0f 00 f0 0f 13 00 00 00 0f 00 f0 0f 67 80 00 00"
++	want := "01 00 13 00 00 00 01 00 0f 00 f0 0f 67 80 00 00"
+ 	if !strings.Contains(string(out), want) {
+ 		t.Errorf("PCALIGN test failed - got %s\nwant %s", out, want)
+ 	}
++
++	// generate a test with invalid use of PCALIGN
++	tmpfile = filepath.Join(dir, "xi.s")
++	invalidAsm := `
++TEXT _stub(SB),$0-0
++	CNOP
++	PCALIGN	$3
++	RET
++`
++	err = os.WriteFile(tmpfile, []byte(invalidAsm), 0644)
++	if err != nil {
++		t.Fatalf("can't write output: %v\n", err)
++	}
++
++	// build test with errors and check for messages
++	cmd = exec.Command(testenv.GoToolPath(t), "tool", "asm", "-o", filepath.Join(dir, "xi.o"), "-S", tmpfile)
++	cmd.Env = append(os.Environ(), "GOARCH=riscv64", "GOOS=linux")
++	out, err = cmd.CombinedOutput()
++	if !strings.Contains(string(out), "alignment value of an instruction must be a power of two and in the range [4, 2048], got 3") {
++		t.Errorf("Invalid alignment not detected for PCALIGN\n")
++	}
+ }
+diff --git a/src/cmd/internal/obj/riscv/cpu.go b/src/cmd/internal/obj/riscv/cpu.go
+index 43ed3bc1f0..f4dcb79c94 100644
+--- a/src/cmd/internal/obj/riscv/cpu.go
++++ b/src/cmd/internal/obj/riscv/cpu.go
+@@ -660,6 +660,38 @@ const (
+ 	ASEQZ
+ 	ASNEZ
+ 
++	// THead Extension ISA
++
++	// 3. XTheadCmo provides instructions for cache management.
++	ATHDCACHECALL
++	ATHDCACHECIALL
++	ATHDCACHEIALL
++	ATHDCACHECPA
++	ATHDCACHECIPA
++	ATHDCACHEIPA
++	ATHDCACHECVA
++	ATHDCACHECIVA
++	ATHDCACHEIVA
++	ATHDCACHECSW
++	ATHDCACHECISW
++	ATHDCACHEISW
++	ATHDCACHECPAL1
++	ATHDCACHECVAL1
++	ATHICACHEIALL
++	ATHICACHEIALLS
++	ATHICACHEIPA
++	ATHICACHEIVA
++	ATHL2CACHECALL
++	ATHL2CACHECIALL
++	ATHL2CACHEIALL
++
++	// 4. XTheadSync provides instructions for multi-processor synchronization.
++	ATHSFENCEVMAS
++	ATHSYNC
++	ATHSYNCS
++	ATHSYNCI
++	ATHSYNCIS
++
+ 	// End marker
+ 	ALAST
+ )
+diff --git a/src/cmd/internal/obj/riscv/inst.go b/src/cmd/internal/obj/riscv/inst.go
+index 75484b6cc0..c0f776eb62 100644
+--- a/src/cmd/internal/obj/riscv/inst.go
++++ b/src/cmd/internal/obj/riscv/inst.go
+@@ -11,6 +11,14 @@ type inst struct {
+ 	funct7 uint32
+ }
+ 
++const (
++	OPC_CUSTOM_0 uint32 = 0b0001011
++)
++
++const (
++	THEAD_FUNCT3_CMO uint32 = 0b000
++)
++
+ func encode(a obj.As) *inst {
+ 	switch a {
+ 	case AADD:
+@@ -517,6 +525,63 @@ func encode(a obj.As) *inst {
+ 		return &inst{0x13, 0x4, 0x0, 0, 0x0}
+ 	case AZEXTH:
+ 		return &inst{0x3b, 0x4, 0x0, 128, 0x4}
++
++	// THead Extension ISA
++	// 3. XTheadCmo provides instructions for cache management.
++	case ATHDCACHECALL:
++		return &inst{ /* opcode */ OPC_CUSTOM_0 /* funct3 */, THEAD_FUNCT3_CMO /* rs2 */, 0b00001 /* csr */, 0b00 /* funct7 */, 0b0000000}
++	case ATHDCACHECIALL:
++		return &inst{ /* opcode */ OPC_CUSTOM_0 /* funct3 */, THEAD_FUNCT3_CMO /* rs2 */, 0b00011 /* csr */, 0b00 /* funct7 */, 0b0000000}
++	case ATHDCACHEIALL:
++		return &inst{ /* opcode */ OPC_CUSTOM_0 /* funct3 */, THEAD_FUNCT3_CMO /* rs2 */, 0b00010 /* csr */, 0b00 /* funct7 */, 0b0000000}
++	case ATHDCACHECPA:
++		return &inst{ /* opcode */ OPC_CUSTOM_0 /* funct3 */, THEAD_FUNCT3_CMO /* rs2 */, 0b01001 /* csr */, 0b00 /* funct7 */, 0b0000001}
++	case ATHDCACHECIPA:
++		return &inst{ /* opcode */ OPC_CUSTOM_0 /* funct3 */, THEAD_FUNCT3_CMO /* rs2 */, 0b01011 /* csr */, 0b00 /* funct7 */, 0b0000001}
++	case ATHDCACHEIPA:
++		return &inst{ /* opcode */ OPC_CUSTOM_0 /* funct3 */, THEAD_FUNCT3_CMO /* rs2 */, 0b01010 /* csr */, 0b00 /* funct7 */, 0b0000001}
++	case ATHDCACHECVA:
++		return &inst{ /* opcode */ OPC_CUSTOM_0 /* funct3 */, THEAD_FUNCT3_CMO /* rs2 */, 0b00101 /* csr */, 0b00 /* funct7 */, 0b0000001}
++	case ATHDCACHECIVA:
++		return &inst{ /* opcode */ OPC_CUSTOM_0 /* funct3 */, THEAD_FUNCT3_CMO /* rs2 */, 0b00111 /* csr */, 0b00 /* funct7 */, 0b0000001}
++	case ATHDCACHEIVA:
++		return &inst{ /* opcode */ OPC_CUSTOM_0 /* funct3 */, THEAD_FUNCT3_CMO /* rs2 */, 0b00110 /* csr */, 0b00 /* funct7 */, 0b0000001}
++	case ATHDCACHECSW:
++		return &inst{ /* opcode */ OPC_CUSTOM_0 /* funct3 */, THEAD_FUNCT3_CMO /* rs2 */, 0b00001 /* csr */, 0b00 /* funct7 */, 0b0000001}
++	case ATHDCACHECISW:
++		return &inst{ /* opcode */ OPC_CUSTOM_0 /* funct3 */, THEAD_FUNCT3_CMO /* rs2 */, 0b00011 /* csr */, 0b00 /* funct7 */, 0b0000001}
++	case ATHDCACHEISW:
++		return &inst{ /* opcode */ OPC_CUSTOM_0 /* funct3 */, THEAD_FUNCT3_CMO /* rs2 */, 0b00010 /* csr */, 0b00 /* funct7 */, 0b0000001}
++	case ATHDCACHECPAL1:
++		return &inst{ /* opcode */ OPC_CUSTOM_0 /* funct3 */, THEAD_FUNCT3_CMO /* rs2 */, 0b01000 /* csr */, 0b00 /* funct7 */, 0b0000001}
++	case ATHDCACHECVAL1:
++		return &inst{ /* opcode */ OPC_CUSTOM_0 /* funct3 */, THEAD_FUNCT3_CMO /* rs2 */, 0b00100 /* csr */, 0b00 /* funct7 */, 0b0000001}
++	case ATHICACHEIALL:
++		return &inst{ /* opcode */ OPC_CUSTOM_0 /* funct3 */, THEAD_FUNCT3_CMO /* rs2 */, 0b10000 /* csr */, 0b00 /* funct7 */, 0b0000000}
++	case ATHICACHEIALLS:
++		return &inst{ /* opcode */ OPC_CUSTOM_0 /* funct3 */, THEAD_FUNCT3_CMO /* rs2 */, 0b10001 /* csr */, 0b00 /* funct7 */, 0b0000000}
++	case ATHICACHEIPA:
++		return &inst{ /* opcode */ OPC_CUSTOM_0 /* funct3 */, THEAD_FUNCT3_CMO /* rs2 */, 0b11000 /* csr */, 0b00 /* funct7 */, 0b0000001}
++	case ATHICACHEIVA:
++		return &inst{ /* opcode */ OPC_CUSTOM_0 /* funct3 */, THEAD_FUNCT3_CMO /* rs2 */, 0b10000 /* csr */, 0b00 /* funct7 */, 0b0000001}
++	case ATHL2CACHECALL:
++		return &inst{ /* opcode */ OPC_CUSTOM_0 /* funct3 */, THEAD_FUNCT3_CMO /* rs2 */, 0b10101 /* csr */, 0b00 /* funct7 */, 0b0000000}
++	case ATHL2CACHECIALL:
++		return &inst{ /* opcode */ OPC_CUSTOM_0 /* funct3 */, THEAD_FUNCT3_CMO /* rs2 */, 0b10111 /* csr */, 0b00 /* funct7 */, 0b0000000}
++	case ATHL2CACHEIALL:
++		return &inst{ /* opcode */ OPC_CUSTOM_0 /* funct3 */, THEAD_FUNCT3_CMO /* rs2 */, 0b10110 /* csr */, 0b00 /* funct7 */, 0b0000000}
++
++	// 4. XTheadSync provides instructions for multi-processor synchronization.
++	case ATHSFENCEVMAS:
++		return &inst{ /* opcode */ OPC_CUSTOM_0 /* funct3 */, THEAD_FUNCT3_CMO /* rs2 */, 0b00000 /* csr */, 0b00 /* funct7 */, 0b0000010}
++	case ATHSYNC:
++		return &inst{ /* opcode */ OPC_CUSTOM_0 /* funct3 */, THEAD_FUNCT3_CMO /* rs2 */, 0b11000 /* csr */, 0b00 /* funct7 */, 0b0000000}
++	case ATHSYNCS:
++		return &inst{ /* opcode */ OPC_CUSTOM_0 /* funct3 */, THEAD_FUNCT3_CMO /* rs2 */, 0b11001 /* csr */, 0b00 /* funct7 */, 0b0000000}
++	case ATHSYNCI:
++		return &inst{ /* opcode */ OPC_CUSTOM_0 /* funct3 */, THEAD_FUNCT3_CMO /* rs2 */, 0b11010 /* csr */, 0b00 /* funct7 */, 0b0000000}
++	case ATHSYNCIS:
++		return &inst{ /* opcode */ OPC_CUSTOM_0 /* funct3 */, THEAD_FUNCT3_CMO /* rs2 */, 0b11011 /* csr */, 0b00 /* funct7 */, 0b0000000}
+ 	}
+ 	return nil
+ }
+diff --git a/src/cmd/internal/obj/riscv/obj.go b/src/cmd/internal/obj/riscv/obj.go
+index 2055f4836e..29853a5a2c 100644
+--- a/src/cmd/internal/obj/riscv/obj.go
++++ b/src/cmd/internal/obj/riscv/obj.go
+@@ -32,6 +32,10 @@ import (
+ 	"strings"
+ )
+ 
++// Used for padding NOP instruction
++const OP_NOP = 0x00000013
++const OP_CNOP = 0x0001
++
+ func buildop(ctxt *obj.Link) {}
+ 
+ func jalToSym(ctxt *obj.Link, p *obj.Prog, lr int16) {
+@@ -545,6 +549,55 @@ func preprocess(ctxt *obj.Link, cursym *obj.LSym, newprog obj.ProgAlloc) {
+ 	// Additional instruction rewriting.
+ 	for p := cursym.Func().Text; p != nil; p = p.Link {
+ 		switch p.As {
++		case ALRW, ALRD:
++			/* Add sequence:
++			sync.i
++			j .Llr_aqrl.
++			.align 7
++			.Llr_aqrl:
++			dcache.cval1 xy
++			lr.*.aqryl (xy)
++			sync
++			.aligin 7
++			next insn
++			*/
++			dest := p.To
++			src := p.From
++			pas := p.As
++
++			p.As = ATHSYNCI
++			p.From = obj.Addr{}
++			p.To = obj.Addr{}
++
++			jmp := obj.Appendp(p, newprog)
++			jmp.As = AJAL
++			jmp.From.Reg = REG_ZERO
++			jmp.To = obj.Addr{Type: obj.TYPE_BRANCH}
++
++			p = obj.Appendp(jmp, newprog)
++			p.As = obj.APCALIGN
++			p.From.Type = obj.TYPE_CONST
++			p.From.Offset = 128
++
++			p = obj.Appendp(p, newprog)
++			jmp.To.SetTarget(p)
++			p.As = ATHDCACHECVAL1
++			p.From.Reg = src.Reg
++			p.From.Type = obj.TYPE_MEM
++
++			p = obj.Appendp(p, newprog)
++			p.As = pas
++			p.From = src
++			p.To = dest
++
++			p = obj.Appendp(p, newprog)
++			p.As = ATHSYNC
++
++			p = obj.Appendp(p, newprog)
++			p.As = obj.APCALIGN
++			p.From.Type = obj.TYPE_CONST
++			p.From.Offset = 128
++
+ 		case obj.AGETCALLERPC:
+ 			if cursym.Leaf() {
+ 				// MOV LR, Rd
+@@ -777,6 +830,7 @@ func preprocess(ctxt *obj.Link, cursym *obj.LSym, newprog obj.ProgAlloc) {
+ 	}
+ }
+ 
++// align code to a certain length by padding bytes.
+ func pcAlignPadLength(pc int64, alignedValue int64) int {
+ 	return int(-pc & (alignedValue - 1))
+ }
+@@ -1495,6 +1549,49 @@ func EncodeUImmediate(imm int64) (int64, error) {
+ 	return imm << 12, nil
+ }
+ 
++// THead Extension ISA
++// 3. XTheadCmo provides instructions for cache management.
++// 4. XTheadSync provides instructions for multi-processor synchronization.
++func encodeXTheadCMO(ins *instruction) uint32 {
++	enc := encode(ins.as)
++	if enc == nil {
++		panic("encodeXTheadCMO: could not encode instruction")
++	}
++	return enc.funct7<<25 | enc.rs2<<20 | enc.funct3<<12 | enc.opcode
++}
++
++func validateXTheadCMO(ctxt *obj.Link, ins *instruction) {
++	// Nothing here.
++}
++
++func encodeXTheadCMOReg(ins *instruction) uint32 {
++	enc := encode(ins.as)
++	if enc == nil {
++		panic("encodeXTheadCMOReg: could not encode instruction")
++	}
++	rs1 := regI(ins.rs1)
++	return enc.funct7<<25 | enc.rs2<<20 | rs1<<15 | enc.funct3<<12 | enc.opcode
++}
++
++func validateXTheadCMOReg(ctxt *obj.Link, ins *instruction) {
++	wantIntReg(ctxt, ins, "rs1", ins.rs1)
++}
++
++func encodeXTheadCMORegReg(ins *instruction) uint32 {
++	enc := encode(ins.as)
++	if enc == nil {
++		panic("encodeXTheadCMORegReg: could not encode instruction")
++	}
++	rs1 := regI(ins.rs1)
++	rs2 := regI(ins.rs2)
++	return enc.funct7<<25 | rs2<<20 | rs1<<15 | enc.funct3<<12 | enc.opcode
++}
++
++func validateXTheadCMORegReg(ctxt *obj.Link, ins *instruction) {
++	wantIntReg(ctxt, ins, "rs1", ins.rs1)
++	wantIntReg(ctxt, ins, "rs2", ins.rs2)
++}
++
+ type encoding struct {
+ 	encode   func(*instruction) uint32     // encode returns the machine code for an instruction
+ 	validate func(*obj.Link, *instruction) // validate validates an instruction
+@@ -1541,6 +1638,13 @@ var (
+ 	// badEncoding is used when an invalid op is encountered.
+ 	// An error has already been generated, so let anything else through.
+ 	badEncoding = encoding{encode: func(*instruction) uint32 { return 0 }, validate: func(*obj.Link, *instruction) {}, length: 0}
++
++	// THead Extension ISA
++	// 3. XTheadCmo provides instructions for cache management.
++	// 4. XTheadSync provides instructions for multi-processor synchronization.
++	xTheadCMOEncoding       = encoding{encode: encodeXTheadCMO, validate: validateXTheadCMO, length: 4}
++	xTheadCMORegEncoding    = encoding{encode: encodeXTheadCMOReg, validate: validateXTheadCMOReg, length: 4}
++	xTheadCMORegRegEncoding = encoding{encode: encodeXTheadCMORegReg, validate: validateXTheadCMORegReg, length: 4}
+ )
+ 
+ // encodings contains the encodings for RISC-V instructions.
+@@ -1799,6 +1903,37 @@ var encodings = [ALAST & obj.AMask]encoding{
+ 	ABSET & obj.AMask:  rIIIEncoding,
+ 	ABSETI & obj.AMask: iIEncoding,
+ 
++	// THead Extension ISA
++	// 3. XTheadCmo provides instructions for cache management.
++	ATHDCACHECALL & obj.AMask:   xTheadCMOEncoding,
++	ATHDCACHECIALL & obj.AMask:  xTheadCMOEncoding,
++	ATHDCACHEIALL & obj.AMask:   xTheadCMOEncoding,
++	ATHDCACHECPA & obj.AMask:    xTheadCMORegEncoding,
++	ATHDCACHECIPA & obj.AMask:   xTheadCMORegEncoding,
++	ATHDCACHEIPA & obj.AMask:    xTheadCMORegEncoding,
++	ATHDCACHECVA & obj.AMask:    xTheadCMORegEncoding,
++	ATHDCACHECIVA & obj.AMask:   xTheadCMORegEncoding,
++	ATHDCACHEIVA & obj.AMask:    xTheadCMORegEncoding,
++	ATHDCACHECSW & obj.AMask:    xTheadCMORegEncoding,
++	ATHDCACHECISW & obj.AMask:   xTheadCMORegEncoding,
++	ATHDCACHEISW & obj.AMask:    xTheadCMORegEncoding,
++	ATHDCACHECPAL1 & obj.AMask:  xTheadCMORegEncoding,
++	ATHDCACHECVAL1 & obj.AMask:  xTheadCMORegEncoding,
++	ATHICACHEIALL & obj.AMask:   xTheadCMOEncoding,
++	ATHICACHEIALLS & obj.AMask:  xTheadCMOEncoding,
++	ATHICACHEIPA & obj.AMask:    xTheadCMORegEncoding,
++	ATHICACHEIVA & obj.AMask:    xTheadCMORegEncoding,
++	ATHL2CACHECALL & obj.AMask:  xTheadCMOEncoding,
++	ATHL2CACHECIALL & obj.AMask: xTheadCMOEncoding,
++	ATHL2CACHEIALL & obj.AMask:  xTheadCMOEncoding,
++
++	// 4. XTheadSync provides instructions for multi-processor synchronization.
++	ATHSFENCEVMAS & obj.AMask: xTheadCMORegRegEncoding,
++	ATHSYNC & obj.AMask:       xTheadCMOEncoding,
++	ATHSYNCS & obj.AMask:      xTheadCMOEncoding,
++	ATHSYNCI & obj.AMask:      xTheadCMOEncoding,
++	ATHSYNCIS & obj.AMask:     xTheadCMOEncoding,
++
+ 	// Escape hatch
+ 	AWORD & obj.AMask: rawEncoding,
+ 
+@@ -2335,11 +2470,49 @@ func instructionsForRotate(p *obj.Prog, ins *instruction) []*instruction {
+ 	}
+ }
+ 
++func instructionForXThead(p *obj.Prog, ins *instruction, inss []*instruction) ([]*instruction, bool) {
++	switch ins.as {
++	// THead Extension ISA
++	// 3. XTheadCmo provides instructions for cache management.
++	// 4. XTheadSync provides instructions for multi-processor synchronization.
++	// Example: ATHDCACHECALL
++	case ATHDCACHECALL, ATHDCACHECIALL, ATHDCACHEIALL, ATHICACHEIALL, ATHICACHEIALLS,
++		ATHL2CACHECALL, ATHL2CACHECIALL, ATHL2CACHEIALL, ATHSYNC, ATHSYNCS, ATHSYNCI, ATHSYNCIS:
++		// No special handling.
++
++	// 3. XTheadCmo provides instructions for cache management.
++	// 4. XTheadSync provides instructions for multi-processor synchronization.
++	// Example: ATHDCACHECPA rs1
++	case ATHDCACHECPA, ATHDCACHECIPA, ATHDCACHEIPA,
++		ATHDCACHECVA, ATHDCACHECIVA, ATHDCACHEIVA, ATHDCACHECSW, ATHDCACHECISW, ATHDCACHEISW,
++		ATHDCACHECPAL1, ATHDCACHECVAL1, ATHICACHEIPA, ATHICACHEIVA:
++		ins.rs1 = uint32(p.From.Reg)
++
++	// 4. XTheadSync provides instructions for multi-processor synchronization.
++	// Example: ATHSFENCEVMAS rs1, rs2
++	case ATHSFENCEVMAS:
++		ins.rs1 = uint32(p.From.Reg)
++		ins.rs2 = uint32(p.To.Reg)
++	default:
++		return nil, true
++	}
++
++	return inss, true
++}
++
+ // instructionsForProg returns the machine instructions for an *obj.Prog.
+ func instructionsForProg(p *obj.Prog) []*instruction {
+ 	ins := instructionForProg(p)
+ 	inss := []*instruction{ins}
+ 
++	xthead, success := instructionForXThead(p, ins, inss)
++	if !success {
++		return nil
++	}
++	if xthead != nil {
++		return xthead
++	}
++
+ 	if len(p.RestArgs) > 1 {
+ 		p.Ctxt.Diag("too many source registers")
+ 		return nil
+@@ -2386,7 +2559,7 @@ func instructionsForProg(p *obj.Prog) []*instruction {
+ 
+ 	case ALRW, ALRD:
+ 		// Set aq to use acquire access ordering
+-		ins.funct7 = 2
++		ins.funct7 = 3
+ 		ins.rs1, ins.rs2 = uint32(p.From.Reg), REG_ZERO
+ 
+ 	case AADDI, AANDI, AORI, AXORI:
+@@ -2624,6 +2797,9 @@ func assemble(ctxt *obj.Link, cursym *obj.LSym, newprog obj.ProgAlloc) {
+ 				cursym.WriteBytes(ctxt, offset, []byte{0x13, 0, 0, 0})
+ 				offset += 4
+ 			}
++			if v > 0 {
++				cursym.WriteInt(ctxt, offset, 2, int64(OP_CNOP))
++			}
+ 			continue
+ 		}
+ 
+-- 
+2.47.1
+
diff -Nru golang-1.23-1.23.6/debian/patches/0003-release-branch.go1.23-cmd-internal-obj-riscv-gofmt.patch golang-1.23-1.23.6/debian/patches/0003-release-branch.go1.23-cmd-internal-obj-riscv-gofmt.patch
--- golang-1.23-1.23.6/debian/patches/0003-release-branch.go1.23-cmd-internal-obj-riscv-gofmt.patch	1970-01-01 08:00:00.000000000 +0800
+++ golang-1.23-1.23.6/debian/patches/0003-release-branch.go1.23-cmd-internal-obj-riscv-gofmt.patch	2025-02-19 15:14:28.000000000 +0800
@@ -0,0 +1,45 @@
+From 2952790607d78671b7d33248aa62c7ffd407bf89 Mon Sep 17 00:00:00 2001
+From: WANG Xuerui <wangxuerui@iscas.ac.cn>
+Date: Wed, 22 Jan 2025 18:01:01 +0800
+Subject: [PATCH 3/5] [release-branch.go1.23] cmd/internal/obj/riscv: gofmt
+
+Change-Id: I9aa1f28070fb18946323f28a78783bb014f558ab
+---
+ src/cmd/internal/obj/riscv/obj.go | 14 +++++++-------
+ 1 file changed, 7 insertions(+), 7 deletions(-)
+
+diff --git a/src/cmd/internal/obj/riscv/obj.go b/src/cmd/internal/obj/riscv/obj.go
+index 29853a5a2c..fcd1c35a1d 100644
+--- a/src/cmd/internal/obj/riscv/obj.go
++++ b/src/cmd/internal/obj/riscv/obj.go
+@@ -2444,10 +2444,10 @@ func instructionsForRotate(p *obj.Prog, ins *instruction) []*instruction {
+ 			shift1, shift2 = shift2, shift1
+ 		}
+ 		return []*instruction{
+-			&instruction{as: ASUB, rs1: REG_ZERO, rs2: ins.rs2, rd: REG_TMP},
+-			&instruction{as: shift2, rs1: ins.rs1, rs2: REG_TMP, rd: REG_TMP},
+-			&instruction{as: shift1, rs1: ins.rs1, rs2: ins.rs2, rd: ins.rd},
+-			&instruction{as: AOR, rs1: REG_TMP, rs2: ins.rd, rd: ins.rd},
++			{as: ASUB, rs1: REG_ZERO, rs2: ins.rs2, rd: REG_TMP},
++			{as: shift2, rs1: ins.rs1, rs2: REG_TMP, rd: REG_TMP},
++			{as: shift1, rs1: ins.rs1, rs2: ins.rs2, rd: ins.rd},
++			{as: AOR, rs1: REG_TMP, rs2: ins.rd, rd: ins.rd},
+ 		}
+ 
+ 	case ARORI, ARORIW:
+@@ -2459,9 +2459,9 @@ func instructionsForRotate(p *obj.Prog, ins *instruction) []*instruction {
+ 			sllImm = int64(int8(-ins.imm) & 31)
+ 		}
+ 		return []*instruction{
+-			&instruction{as: srlOp, rs1: ins.rs1, rd: REG_TMP, imm: ins.imm},
+-			&instruction{as: sllOp, rs1: ins.rs1, rd: ins.rd, imm: sllImm},
+-			&instruction{as: AOR, rs1: REG_TMP, rs2: ins.rd, rd: ins.rd},
++			{as: srlOp, rs1: ins.rs1, rd: REG_TMP, imm: ins.imm},
++			{as: sllOp, rs1: ins.rs1, rd: ins.rd, imm: sllImm},
++			{as: AOR, rs1: REG_TMP, rs2: ins.rd, rd: ins.rd},
+ 		}
+ 
+ 	default:
+-- 
+2.47.1
+
diff -Nru golang-1.23-1.23.6/debian/patches/0004-release-branch.go1.21-fix-fix-cmd-asm-riscv64-test-r.patch golang-1.23-1.23.6/debian/patches/0004-release-branch.go1.21-fix-fix-cmd-asm-riscv64-test-r.patch
--- golang-1.23-1.23.6/debian/patches/0004-release-branch.go1.21-fix-fix-cmd-asm-riscv64-test-r.patch	1970-01-01 08:00:00.000000000 +0800
+++ golang-1.23-1.23.6/debian/patches/0004-release-branch.go1.21-fix-fix-cmd-asm-riscv64-test-r.patch	2025-02-19 15:14:28.000000000 +0800
@@ -0,0 +1,33 @@
+From 1ae9143de0bda91aafc9432f8033171fb6ccf0a4 Mon Sep 17 00:00:00 2001
+From: WANG Xuerui <wangxuerui@iscas.ac.cn>
+Date: Thu, 2 Nov 2023 16:49:15 +0800
+Subject: [PATCH 4/5] [release-branch.go1.21] fix: fix cmd/asm riscv64 test
+ regarding thead LR workaround
+
+This is not a proper fix, but the test framework apparently doesn't
+support checking encodings for multiple expanded insns from one insn.
+
+Change-Id: Id448dcaa71e99cd6cb3431797af064ba90ac7b81
+(cherry picked from commit 00aa63d2632a98b4931dcda1cf94ab08a459efc9)
+---
+ src/cmd/asm/internal/asm/testdata/riscv64.s | 4 ++--
+ 1 file changed, 2 insertions(+), 2 deletions(-)
+
+diff --git a/src/cmd/asm/internal/asm/testdata/riscv64.s b/src/cmd/asm/internal/asm/testdata/riscv64.s
+index 5c8d529029..1fe294d6bf 100644
+--- a/src/cmd/asm/internal/asm/testdata/riscv64.s
++++ b/src/cmd/asm/internal/asm/testdata/riscv64.s
+@@ -186,8 +186,8 @@ start:
+ 	REMUW	X5, X6, X7				// bb735302
+ 
+ 	// 8.2: Load-Reserved/Store-Conditional
+-	LRW	(X5), X6				// 2fa30214
+-	LRD	(X5), X6				// 2fb30214
++	LRW	(X5), X6				// 0b00a001
++	LRD	(X5), X6				// 0b00a001
+ 	SCW	X5, (X6), X7				// af23531a
+ 	SCD	X5, (X6), X7				// af33531a
+ 
+-- 
+2.47.1
+
diff -Nru golang-1.23-1.23.6/debian/patches/0005-release-branch.go1.23-release-branch.go1.21-cmd-inte.patch golang-1.23-1.23.6/debian/patches/0005-release-branch.go1.23-release-branch.go1.21-cmd-inte.patch
--- golang-1.23-1.23.6/debian/patches/0005-release-branch.go1.23-release-branch.go1.21-cmd-inte.patch	1970-01-01 08:00:00.000000000 +0800
+++ golang-1.23-1.23.6/debian/patches/0005-release-branch.go1.23-release-branch.go1.21-cmd-inte.patch	2025-02-19 15:14:28.000000000 +0800
@@ -0,0 +1,27 @@
+From 2367347a0081c91a2eaa3945fe4e05055853596c Mon Sep 17 00:00:00 2001
+From: WANG Xuerui <wangxuerui@iscas.ac.cn>
+Date: Thu, 2 Nov 2023 16:54:47 +0800
+Subject: [PATCH 5/5] [release-branch.go1.23] [release-branch.go1.21]
+ cmd/internal/obj/riscv: skip the faulty TestPcalign test for now
+
+Change-Id: Iaf9161637b48375ccb0906ee2154bad304d5e1ae
+(cherry picked from commit 6b8528bdc3eda2e0fa22fac7dfdac0394bd9b2ef)
+---
+ src/cmd/internal/obj/riscv/asm_test.go | 1 +
+ 1 file changed, 1 insertion(+)
+
+diff --git a/src/cmd/internal/obj/riscv/asm_test.go b/src/cmd/internal/obj/riscv/asm_test.go
+index 703047376e..dbfdf9a291 100644
+--- a/src/cmd/internal/obj/riscv/asm_test.go
++++ b/src/cmd/internal/obj/riscv/asm_test.go
+@@ -281,6 +281,7 @@ func TestBranch(t *testing.T) {
+ }
+ 
+ func TestPCAlign(t *testing.T) {
++	t.Skip("CNOP is not supported by Go asm yet")
+ 	dir := t.TempDir()
+ 	tmpfile := filepath.Join(dir, "x.s")
+ 	asm := `
+-- 
+2.47.1
+
diff -Nru golang-1.23-1.23.6/debian/patches/series golang-1.23-1.23.6/debian/patches/series
--- golang-1.23-1.23.6/debian/patches/series	2025-02-13 17:17:32.000000000 +0800
+++ golang-1.23-1.23.6/debian/patches/series	2025-02-19 15:15:02.000000000 +0800
@@ -1,2 +1,8 @@
 0001-Skip-flaky-TestCrashDumpsAllThreads-on-mips64le.patch
 0002-Skip-flaky-TestCrashDumpsAllThreads-on-s390x.patch
+# revyos patchset
+0001-release-branch.go1.21-cmd-internal-obj-hack-FENCETSO.patch
+0002-release-branch.go1.23-src-cmd-internal-obj-riscv-Fix.patch
+0003-release-branch.go1.23-cmd-internal-obj-riscv-gofmt.patch
+0004-release-branch.go1.21-fix-fix-cmd-asm-riscv64-test-r.patch
+0005-release-branch.go1.23-release-branch.go1.21-cmd-inte.patch
