diff -Nru gcc-13-13.3.0/debian/changelog gcc-13-13.3.0/debian/changelog
--- gcc-13-13.3.0/debian/changelog	2024-12-31 16:06:06.000000000 +0800
+++ gcc-13-13.3.0/debian/changelog	2025-01-02 00:54:13.000000000 +0800
@@ -1,3 +1,9 @@
+gcc-13 (13.3.0-12revyos1) unstable; urgency=medium
+
+  * Apply revyos patchset
+
+ -- Han Gao <rabenda.cn@gmail.com>  Thu, 02 Jan 2025 00:54:13 +0800
+
 gcc-13 (13.3.0-12) unstable; urgency=medium
 
   * Update to git 20241231 from the gcc-13 branch.
diff -Nru gcc-13-13.3.0/debian/patches/revyos-git-update-13.3.diff gcc-13-13.3.0/debian/patches/revyos-git-update-13.3.diff
--- gcc-13-13.3.0/debian/patches/revyos-git-update-13.3.diff	1970-01-01 08:00:00.000000000 +0800
+++ gcc-13-13.3.0/debian/patches/revyos-git-update-13.3.diff	2025-01-02 00:53:30.000000000 +0800
@@ -0,0 +1,602 @@
+--- a/src/gcc/config/riscv/riscv.cc
++++ b/src/gcc/config/riscv/riscv.cc
+@@ -541,16 +541,15 @@ riscv_build_integer_1 (struct riscv_integer_op codes[RISCV_MAX_INTEGER_OPS],
+ 	}
+     }
+ 
+-  if (cost > 2 && TARGET_64BIT && TARGET_ZBB)
++  if (cost > 2 && TARGET_64BIT && (TARGET_ZBB || TARGET_XTHEADBB))
+     {
+       int leading_ones = clz_hwi (~value);
+       int trailing_ones = ctz_hwi (~value);
+ 
+       /* If all bits are one except a few that are zero, and the zero bits
+-	 are within a range of 11 bits, and at least one of the upper 32-bits
+-	 is a zero, then we can generate a constant by loading a small
+-	 negative constant and rotating.  */
+-      if (leading_ones < 32
++	 are within a range of 11 bits, then we can synthesize a constant
++	 by loading a small negative constant and rotating.  */
++      if (leading_ones < 64
+ 	  && ((64 - leading_ones - trailing_ones) < 12))
+ 	{
+ 	  codes[0].code = UNKNOWN;
+--- a/src/gcc/config/riscv/riscv.md
++++ b/src/gcc/config/riscv/riscv.md
+@@ -1368,7 +1368,7 @@
+   [(set (match_operand:DI     0 "register_operand"     "=r,r")
+ 	(zero_extend:DI
+ 	    (match_operand:SI 1 "nonimmediate_operand" " r,m")))]
+-  "TARGET_64BIT && !TARGET_ZBA
++  "TARGET_64BIT && !TARGET_ZBA && !TARGET_XTHEADBB
+    && !(register_operand (operands[1], SImode)
+         && reg_or_subregno (operands[1]) == VL_REGNUM)"
+   "@
+@@ -1395,7 +1395,7 @@
+   [(set (match_operand:GPR    0 "register_operand"     "=r,r")
+ 	(zero_extend:GPR
+ 	    (match_operand:HI 1 "nonimmediate_operand" " r,m")))]
+-  "!TARGET_ZBB"
++  "!TARGET_ZBB && !TARGET_XTHEADBB"
+   "@
+    #
+    lhu\t%0,%1"
+@@ -1451,7 +1451,7 @@
+   [(set (match_operand:SUPERQI   0 "register_operand"     "=r,r")
+ 	(sign_extend:SUPERQI
+ 	    (match_operand:SHORT 1 "nonimmediate_operand" " r,m")))]
+-  "!TARGET_ZBB"
++  "!TARGET_ZBB && !TARGET_XTHEADBB"
+   "@
+    #
+    l<SHORT:size>\t%0,%1"
+--- a/src/gcc/config/riscv/sync.md
++++ b/src/gcc/config/riscv/sync.md
+@@ -57,7 +57,7 @@
+     if (model == MEMMODEL_SEQ_CST)
+ 	return "fence\trw,rw";
+     else if (model == MEMMODEL_ACQ_REL)
+-	return "fence.tso";
++	return "fence\trw,rw";
+     else if (model == MEMMODEL_ACQUIRE)
+ 	return "fence\tr,rw";
+     else if (model == MEMMODEL_RELEASE)
+--- a/src/gcc/config/riscv/thead.cc
++++ b/src/gcc/config/riscv/thead.cc
+@@ -336,8 +336,8 @@ th_mempair_operands_p (rtx operands[4], bool load_p,
+ }
+ 
+ /* Given OPERANDS of consecutive load/store that can be merged,
+-   swap them if they are not in ascending order.
+-   Return true if swap was performed.  */
++   swap them if they are not in ascending order.  */
++
+ void
+ th_mempair_order_operands (rtx operands[4], bool load_p, machine_mode mode)
+ {
+@@ -366,14 +366,15 @@ th_mempair_save_regs (rtx operands[4])
+ {
+   rtx set1 = gen_rtx_SET (operands[0], operands[1]);
+   rtx set2 = gen_rtx_SET (operands[2], operands[3]);
++  rtx dwarf = gen_rtx_SEQUENCE (VOIDmode, rtvec_alloc (2));
+   rtx insn = emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, set1, set2)));
+   RTX_FRAME_RELATED_P (insn) = 1;
+ 
+-  REG_NOTES (insn) = alloc_EXPR_LIST (REG_FRAME_RELATED_EXPR,
+-				      copy_rtx (set1), REG_NOTES (insn));
+-
+-  REG_NOTES (insn) = alloc_EXPR_LIST (REG_FRAME_RELATED_EXPR,
+-				      copy_rtx (set2), REG_NOTES (insn));
++  XVECEXP (dwarf, 0, 0) = copy_rtx (set1);
++  XVECEXP (dwarf, 0, 1) = copy_rtx (set2);
++  RTX_FRAME_RELATED_P (XVECEXP (dwarf, 0, 0)) = 1;
++  RTX_FRAME_RELATED_P (XVECEXP (dwarf, 0, 1)) = 1;
++  add_reg_note (insn, REG_FRAME_RELATED_EXPR, dwarf);
+ }
+ 
+ /* Similar like riscv_restore_reg, but restores two registers from memory
+--- a/src/gcc/config/riscv/thead.md
++++ b/src/gcc/config/riscv/thead.md
+@@ -59,6 +59,28 @@
+   [(set_attr "type" "bitmanip")
+    (set_attr "mode" "<GPR:MODE>")])
+ 
++(define_insn "*extendhi<SUPERQI:mode>2_th_ext"
++  [(set (match_operand:SUPERQI 0 "register_operand" "=r,r")
++	(sign_extend:SUPERQI
++	    (match_operand:HI 1 "nonimmediate_operand" "r,m")))]
++  "TARGET_XTHEADBB"
++  "@
++   th.ext\t%0,%1,15,0
++   lh\t%0,%1"
++  [(set_attr "type" "bitmanip,load")
++   (set_attr "mode" "<SUPERQI:MODE>")])
++
++(define_insn "*extendqi<SUPERQI:mode>2_th_ext"
++  [(set (match_operand:SUPERQI 0 "register_operand" "=r,r")
++	(sign_extend:SUPERQI
++	    (match_operand:QI 1 "nonimmediate_operand" "r,m")))]
++  "TARGET_XTHEADBB"
++  "@
++   th.ext\t%0,%1,7,0
++   lb\t%0,%1"
++  [(set_attr "type" "bitmanip,load")
++   (set_attr "mode" "<SUPERQI:MODE>")])
++
+ (define_insn "*th_extu<mode>4"
+   [(set (match_operand:GPR 0 "register_operand" "=r")
+ 	(zero_extract:GPR (match_operand:GPR 1 "register_operand" "r")
+@@ -72,6 +94,26 @@
+   [(set_attr "type" "bitmanip")
+    (set_attr "mode" "<GPR:MODE>")])
+ 
++(define_insn "*zero_extendsidi2_th_extu"
++  [(set (match_operand:DI 0 "register_operand" "=r,r")
++	(zero_extend:DI (match_operand:SI 1 "nonimmediate_operand" "r,m")))]
++  "TARGET_64BIT && TARGET_XTHEADBB"
++  "@
++   th.extu\t%0,%1,31,0
++   lwu\t%0,%1"
++  [(set_attr "type" "bitmanip,load")
++   (set_attr "mode" "DI")])
++
++(define_insn "*zero_extendhi<GPR:mode>2_th_extu"
++  [(set (match_operand:GPR 0 "register_operand" "=r,r")
++	(zero_extend:GPR (match_operand:HI 1 "nonimmediate_operand" "r,m")))]
++  "TARGET_XTHEADBB"
++  "@
++   th.extu\t%0,%1,15,0
++   lhu\t%0,%1"
++  [(set_attr "type" "bitmanip,load")
++   (set_attr "mode" "<GPR:MODE>")])
++
+ (define_insn "*th_clz<mode>2"
+   [(set (match_operand:X 0 "register_operand" "=r")
+ 	(clz:X (match_operand:X 1 "register_operand" "r")))]
+new file mode 100644
+--- /dev/null
++++ b/src/gcc/testsuite/gcc.target/riscv/xtheadbb-ext-1.c
+@@ -0,0 +1,67 @@
++/* { dg-do compile } */
++/* { dg-options "-march=rv64gc_xtheadbb" { target { rv64 } } } */
++/* { dg-options "-march=rv32gc_xtheadbb" { target { rv32 } } } */
++/* { dg-skip-if "" { *-*-* } { "-O0" "-Os" "-Og" } } */
++
++long sext64_32(int s32)
++{
++    return s32;
++}
++
++long sext64_16(short s16)
++{
++    return s16;
++}
++
++long sext64_8(char s8)
++{
++    return s8;
++}
++
++int sext32_64(long s64)
++{
++    return s64;
++}
++
++int sext32_16(short s16)
++{
++    return s16;
++}
++
++int sext32_8(char s8)
++{
++    return s8;
++}
++
++short sext16_64(long s64)
++{
++    return s64;
++}
++
++short sext16_32(int s32)
++{
++    return s32;
++}
++
++short sext16_8(char s8)
++{
++    return s8;
++}
++
++char sext8_64(long s64)
++{
++    return s64;
++}
++
++char sext8_32(int s32)
++{
++    return s32;
++}
++
++char sext8_16(short s16)
++{
++    return s16;
++}
++
++/* { dg-final { scan-assembler-not "slli" } } */
++/* { dg-final { scan-assembler-not "srli" } } */
+new file mode 100644
+--- /dev/null
++++ b/src/gcc/testsuite/gcc.target/riscv/xtheadbb-ext-2.c
+@@ -0,0 +1,12 @@
++/* { dg-do compile } */
++/* { dg-options "-march=rv64gc_xtheadbb" { target { rv64 } } } */
++/* { dg-options "-march=rv32gc_xtheadbb" { target { rv32 } } } */
++/* { dg-skip-if "" { *-*-* } { "-O0" "-Os" "-Og" "-Oz" } } */
++
++signed long extqi(signed char i)
++{
++    return --i;
++}
++
++/* { dg-final { scan-assembler "th.ext\ta\[0-9\]+,a\[0-9\]+,7,0" } } */
++/* { dg-final { scan-assembler-not "th.ext\ta\[0-9\]+,a\[0-9\]+,15,0" } } */
+new file mode 100644
+--- /dev/null
++++ b/src/gcc/testsuite/gcc.target/riscv/xtheadbb-ext-3.c
+@@ -0,0 +1,12 @@
++/* { dg-do compile } */
++/* { dg-options "-march=rv64gc_xtheadbb" { target { rv64 } } } */
++/* { dg-options "-march=rv32gc_xtheadbb" { target { rv32 } } } */
++/* { dg-skip-if "" { *-*-* } { "-O0" "-Os" "-Og" "-Oz" } } */
++
++signed long exthi(signed short i)
++{
++    return --i;
++}
++
++/* { dg-final { scan-assembler "th.ext\ta\[0-9\]+,a\[0-9\]+,15,0" } } */
++/* { dg-final { scan-assembler-not "th.ext\ta\[0-9\]+,a\[0-9\]+,7,0" } } */
+new file mode 100644
+--- /dev/null
++++ b/src/gcc/testsuite/gcc.target/riscv/xtheadbb-extu-1.c
+@@ -0,0 +1,67 @@
++/* { dg-do compile } */
++/* { dg-options "-march=rv32gc_xtheadbb" { target { rv32 } } } */
++/* { dg-options "-march=rv64gc_xtheadbb" { target { rv64 } } } */
++/* { dg-skip-if "" { *-*-* } { "-O0" "-Os" "-Og" } } */
++
++unsigned long zext64_32(unsigned int u32)
++{
++    return u32; //th.extu a0, a0, 31, 0
++}
++
++unsigned long zext64_16(unsigned short u16)
++{
++    return u16;
++}
++
++unsigned long zext64_8(unsigned char u8)
++{
++    return u8;
++}
++
++unsigned int zext32_64(unsigned long u64)
++{
++    return u64;
++}
++
++unsigned int zext32_16(unsigned short u16)
++{
++    return u16;
++}
++
++unsigned int zext32_8(unsigned char u8)
++{
++    return u8;
++}
++
++unsigned short zext16_64(unsigned long u64)
++{
++    return u64;
++}
++
++unsigned short zext16_32(unsigned int u32)
++{
++    return u32;
++}
++
++unsigned short zext16_8(unsigned char u8)
++{
++    return u8;
++}
++
++unsigned char zext8_64(unsigned long u64)
++{
++    return u64;
++}
++
++unsigned char zext8_32(unsigned int u32)
++{
++    return u32;
++}
++
++unsigned char zext8_16(unsigned short u16)
++{
++    return u16;
++}
++
++/* { dg-final { scan-assembler-not "slli" } } */
++/* { dg-final { scan-assembler-not "srli" } } */
+new file mode 100644
+--- /dev/null
++++ b/src/gcc/testsuite/gcc.target/riscv/xtheadbb-li-rotr.c
+@@ -0,0 +1,88 @@
++/* { dg-do compile } */
++/* { dg-options "-march=rv64gc_xtheadbb -mabi=lp64" } */
++/* { dg-skip-if "" { *-*-* } {"-O0" "-Os" "-Og" "-Oz" "-flto" } } */
++/* { dg-final { check-function-bodies "**" "" } } */
++
++/*
++**li_th_srri_1:
++**     li	a[0-9]+,-18
++**     th.srri	a[0-9]+,a[0-9]+,21
++**     ret
++*/
++long
++li_th_srri_1 (void)
++{
++  return 0xffff77ffffffffffL;
++}
++
++/*
++**li_th_srri_2:
++**     li	a[0-9]+,-18
++**     th.srri	a[0-9]+,a[0-9]+,5
++**     ret
++*/
++long
++li_th_srri_2 (void)
++{
++  return 0x77ffffffffffffffL;
++}
++
++/*
++**li_th_srri_3:
++**     li	a[0-9]+,-18
++**     th.srri	a[0-9]+,a[0-9]+,36
++**     ret
++*/
++long
++li_th_srri_3 (void)
++{
++  return 0xfffffffeefffffffL;
++}
++
++/*
++**li_th_srri_4:
++**     li	a[0-9]+,-86
++**     th.srri	a[0-9]+,a[0-9]+,3
++**     ret
++*/
++long
++li_th_srri_4 (void)
++{
++  return 0x5ffffffffffffff5L;
++}
++
++/*
++**li_th_srri_5:
++**     li	a[0-9]+,-86
++**     th.srri	a[0-9]+,a[0-9]+,4
++**     ret
++*/
++long
++li_th_srri_5 (void)
++{
++  return 0xaffffffffffffffaL;
++}
++
++/*
++**li_th_srri_6:
++**     li	a[0-9]+,-256
++**     th.srri	a[0-9]+,a[0-9]+,40
++**     ret
++*/
++long
++li_th_srri_6 (void)
++{
++  return 0xffffffff00ffffffL;
++}
++
++/*
++**li_th_srri_7:
++**     li	a[0-9]+,-2048
++**     th.srri	a[0-9]+,a[0-9]+,16
++**     ret
++*/
++long
++li_th_srri_7 (void)
++{
++  return 0xf800ffffffffffffL;
++}
+--- a/src/gcc/testsuite/gcc.target/riscv/xtheadcondmov-mveqz-imm-eqz.c
++++ b/src/gcc/testsuite/gcc.target/riscv/xtheadcondmov-mveqz-imm-eqz.c
+@@ -1,7 +1,7 @@
+ /* { dg-do compile } */
+ /* { dg-options "-march=rv32gc_xtheadcondmov" { target { rv32 } } } */
+ /* { dg-options "-march=rv64gc_xtheadcondmov" { target { rv64 } } } */
+-/* { dg-skip-if "" { *-*-* } { "-O0" "-Os" "-Og" } } */
++/* { dg-skip-if "" { *-*-* } { "-O0" "-Os" "-Og" "-Oz" } } */
+ 
+ int
+ not_int_int (int x, int cond)
+--- a/src/gcc/testsuite/gcc.target/riscv/xtheadcondmov-mveqz-imm-not.c
++++ b/src/gcc/testsuite/gcc.target/riscv/xtheadcondmov-mveqz-imm-not.c
+@@ -1,7 +1,7 @@
+ /* { dg-do compile } */
+ /* { dg-options "-march=rv32gc_xtheadcondmov" { target { rv32 } } } */
+ /* { dg-options "-march=rv64gc_xtheadcondmov" { target { rv64 } } } */
+-/* { dg-skip-if "" { *-*-* } { "-O0" "-Os" "-Og" } } */
++/* { dg-skip-if "" { *-*-* } { "-O0" "-Os" "-Og" "-Oz" } } */
+ 
+ int
+ not_int_int (int x, int cond)
+--- a/src/gcc/testsuite/gcc.target/riscv/xtheadcondmov-mveqz-reg-eqz.c
++++ b/src/gcc/testsuite/gcc.target/riscv/xtheadcondmov-mveqz-reg-eqz.c
+@@ -1,7 +1,7 @@
+ /* { dg-do compile } */
+ /* { dg-options "-march=rv32gc_xtheadcondmov" { target { rv32 } } } */
+ /* { dg-options "-march=rv64gc_xtheadcondmov" { target { rv64 } } } */
+-/* { dg-skip-if "" { *-*-* } { "-O0" "-Os" "-Og" } } */
++/* { dg-skip-if "" { *-*-* } { "-O0" "-Os" "-Og" "-Oz" } } */
+ 
+ int
+ not_int_int (int x, int cond, int v)
+--- a/src/gcc/testsuite/gcc.target/riscv/xtheadcondmov-mveqz-reg-not.c
++++ b/src/gcc/testsuite/gcc.target/riscv/xtheadcondmov-mveqz-reg-not.c
+@@ -1,7 +1,7 @@
+ /* { dg-do compile } */
+ /* { dg-options "-march=rv32gc_xtheadcondmov" { target { rv32 } } } */
+ /* { dg-options "-march=rv64gc_xtheadcondmov" { target { rv64 } } } */
+-/* { dg-skip-if "" { *-*-* } { "-O0" "-Os" "-Og" } } */
++/* { dg-skip-if "" { *-*-* } { "-O0" "-Os" "-Og" "-Oz" } } */
+ 
+ int
+ not_int_int (int x, int cond, int v)
+--- a/src/gcc/testsuite/gcc.target/riscv/xtheadcondmov-mvnez-imm-cond.c
++++ b/src/gcc/testsuite/gcc.target/riscv/xtheadcondmov-mvnez-imm-cond.c
+@@ -1,7 +1,7 @@
+ /* { dg-do compile } */
+ /* { dg-options "-march=rv32gc_xtheadcondmov" { target { rv32 } } } */
+ /* { dg-options "-march=rv64gc_xtheadcondmov" { target { rv64 } } } */
+-/* { dg-skip-if "" { *-*-* } { "-O0" "-Os" "-Og" } } */
++/* { dg-skip-if "" { *-*-* } { "-O0" "-Os" "-Og" "-Oz" } } */
+ 
+ int
+ not_int_int (int x, int cond)
+--- a/src/gcc/testsuite/gcc.target/riscv/xtheadcondmov-mvnez-imm-nez.c
++++ b/src/gcc/testsuite/gcc.target/riscv/xtheadcondmov-mvnez-imm-nez.c
+@@ -1,7 +1,7 @@
+ /* { dg-do compile } */
+ /* { dg-options "-march=rv32gc_xtheadcondmov" { target { rv32 } } } */
+ /* { dg-options "-march=rv64gc_xtheadcondmov" { target { rv64 } } } */
+-/* { dg-skip-if "" { *-*-* } { "-O0" "-Os" "-Og" } } */
++/* { dg-skip-if "" { *-*-* } { "-O0" "-Os" "-Og" "-Oz" } } */
+ 
+ int
+ not_int_int (int x, int cond)
+--- a/src/gcc/testsuite/gcc.target/riscv/xtheadcondmov-mvnez-reg-cond.c
++++ b/src/gcc/testsuite/gcc.target/riscv/xtheadcondmov-mvnez-reg-cond.c
+@@ -1,7 +1,7 @@
+ /* { dg-do compile } */
+ /* { dg-options "-march=rv32gc_xtheadcondmov" { target { rv32 } } } */
+ /* { dg-options "-march=rv64gc_xtheadcondmov" { target { rv64 } } } */
+-/* { dg-skip-if "" { *-*-* } { "-O0" "-Os" "-Og" } } */
++/* { dg-skip-if "" { *-*-* } { "-O0" "-Os" "-Og" "-Oz" } } */
+ 
+ int
+ not_int_int (int x, int cond, int v)
+--- a/src/gcc/testsuite/gcc.target/riscv/xtheadcondmov-mvnez-reg-nez.c
++++ b/src/gcc/testsuite/gcc.target/riscv/xtheadcondmov-mvnez-reg-nez.c
+@@ -1,7 +1,7 @@
+ /* { dg-do compile } */
+ /* { dg-options "-march=rv32gc_xtheadcondmov" { target { rv32 } } } */
+ /* { dg-options "-march=rv64gc_xtheadcondmov" { target { rv64 } } } */
+-/* { dg-skip-if "" { *-*-* } { "-O0" "-Os" "-Og" } } */
++/* { dg-skip-if "" { *-*-* } { "-O0" "-Os" "-Og" "-Oz" } } */
+ 
+ int
+ not_int_int (int x, int cond, int v)
+--- a/src/gcc/testsuite/gcc.target/riscv/zbb-li-rotr.c
++++ b/src/gcc/testsuite/gcc.target/riscv/zbb-li-rotr.c
+@@ -1,35 +1,88 @@
+ /* { dg-do compile } */
+ /* { dg-options "-march=rv64gc_zbb -mabi=lp64" } */
++/* { dg-skip-if "" { *-*-* } {"-O0" "-Os" "-Og" "-Oz" "-flto" } } */
++/* { dg-final { check-function-bodies "**" "" } } */
+ 
++/*
++**li_rori_1:
++**     li	a[0-9]+,-18
++**     rori	a[0-9]+,a[0-9]+,21
++**     ret
++*/
+ long
+-li_rori (void)
++li_rori_1 (void)
+ {
+   return 0xffff77ffffffffffL;
+ }
+ 
++/*
++**li_rori_2:
++**     li	a[0-9]+,-18
++**     rori	a[0-9]+,a[0-9]+,5
++**     ret
++*/
+ long
+ li_rori_2 (void)
+ {
+   return 0x77ffffffffffffffL;
+ }
+ 
++/*
++**li_rori_3:
++**     li	a[0-9]+,-18
++**     rori	a[0-9]+,a[0-9]+,36
++**     ret
++*/
+ long
+ li_rori_3 (void)
+ {
+   return 0xfffffffeefffffffL;
+ }
+ 
++/*
++**li_rori_4:
++**     li	a[0-9]+,-86
++**     rori	a[0-9]+,a[0-9]+,3
++**     ret
++*/
+ long
+ li_rori_4 (void)
+ {
+   return 0x5ffffffffffffff5L;
+ }
+ 
++/*
++**li_rori_5:
++**     li	a[0-9]+,-86
++**     rori	a[0-9]+,a[0-9]+,4
++**     ret
++*/
+ long
+ li_rori_5 (void)
+ {
+   return 0xaffffffffffffffaL;
+ }
+ 
++/*
++**li_rori_6:
++**     li	a[0-9]+,-256
++**     rori	a[0-9]+,a[0-9]+,40
++**     ret
++*/
++long
++li_rori_6 (void)
++{
++  return 0xffffffff00ffffffL;
++}
+ 
+-/* { dg-final { scan-assembler-times "rori\t" 5 } } */
++/*
++**li_rori_7:
++**     li	a[0-9]+,-2048
++**     rori	a[0-9]+,a[0-9]+,16
++**     ret
++*/
++long
++li_rori_7 (void)
++{
++  return 0xf800ffffffffffffL;
++}
diff -Nru gcc-13-13.3.0/debian/rules.patch gcc-13-13.3.0/debian/rules.patch
--- gcc-13-13.3.0/debian/rules.patch	2024-12-30 18:32:40.000000000 +0800
+++ gcc-13-13.3.0/debian/rules.patch	2025-01-02 00:54:05.000000000 +0800
@@ -285,6 +285,9 @@
 # don't remove, this is regularly overwritten, see PR sanitizer/63958.
 #debian_patches += libasan-sparc
 
+# revyos patch
+debian_patches += revyos-git-update-13.3
+
 series_stamp = $(stampdir)/02-series-stamp
 series: $(series_stamp)
 $(series_stamp):
